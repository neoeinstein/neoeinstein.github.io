<rss version="2.0">
  <channel>
    <title>Grim's Scythe</title>
    <link>https://neoeinstein.github.io/</link>
    <description>Writings on software engineering focusing on my journey into functional programming practices. I am often found writing in F#, PowerShell, and C#. Former contributor to the Boo programming language. Views expressed here are mine and do not represent the views of my employer or any other party.
</description>
    <item>
      <title>Chiron: Easier with Computation Expressions</title>
      <guid>https://neoeinstein.github.io//blog/2016/04-02-chiron-computation-expressions</guid>
      <link>https://neoeinstein.github.io//blog/2016/04-02-chiron-computation-expressions/index.html</link>
      <pubDate>Sat, 02 Apr 2016 18:30:00 GMT</pubDate>
      <description>&lt;p&gt;Back in my first &lt;a href="/blog/2015/12-13-chiron-json-ducks-monads/index.html"&gt;Chiron article&lt;/a&gt;, I made a bit of a mistake. I started with all the things
that scare off new functional programmers. Things like &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; and monads. We're going to take a step
back from that precipice and talk about the &lt;code&gt;json{}&lt;/code&gt; computation expression.&lt;/p&gt;


</description>
    </item>
    <item>
      <title>Chiron: Taming Types in the Wild</title>
      <guid>https://neoeinstein.github.io//blog/2015/12-15-chiron-taming-types-in-the-wild</guid>
      <link>https://neoeinstein.github.io//blog/2015/12-15-chiron-taming-types-in-the-wild/index.html</link>
      <pubDate>Tue, 15 Dec 2015 05:00:00 GMT</pubDate>
      <description>&lt;p&gt;In my &lt;a href="/blog/2015/12-13-chiron-json-ducks-monads/index.html"&gt;last post&lt;/a&gt;, I gave an overview of &lt;a href="https://xyncro.tech/chiron/"&gt;Chiron&lt;/a&gt;, described how to parse JSON, and demonstrated how to
write &lt;code&gt;ToJson&lt;/code&gt; and &lt;code&gt;FromJson&lt;/code&gt; static methods to support serialization of custom types. At the end of the article, I
left a question hanging: What if you don't control the data type that you want to serialize? What if you can't add the
static &lt;code&gt;ToJson&lt;/code&gt;/&lt;code&gt;FromJson&lt;/code&gt; methods required by Chiron? That's where serialization extensions come in.&lt;/p&gt;


</description>
    </item>
    <item>
      <title>Chiron: JSON + Ducks + Monads</title>
      <guid>https://neoeinstein.github.io//blog/2015/12-13-chiron-json-ducks-monads</guid>
      <link>https://neoeinstein.github.io//blog/2015/12-13-chiron-json-ducks-monads/index.html</link>
      <pubDate>Sun, 13 Dec 2015 19:15:16 GMT</pubDate>
      <description>&lt;p&gt;There are a multitude of ways to handle JSON data on the .NET framework. You can pull in &lt;a href="http://www.newtonsoft.com/json"&gt;Json.NET&lt;/a&gt;, use the
&lt;code&gt;JsonSerializer&lt;/code&gt; from the now proprietary &lt;a href="https://servicestack.net/text"&gt;ServiceStack.Text&lt;/a&gt;, or use the &lt;code&gt;JsonDataContractSerializer&lt;/code&gt;
provided by the Base Class Libraries. Developers in F# have access to the strongly-typed erasing type provider through
FSharp.Data's &lt;a href="https://fsharp.github.io/FSharp.Data/library/JsonProvider.html"&gt;&lt;code&gt;JsonProvider&lt;/code&gt;&lt;/a&gt;. In terms of simplicity, though, &lt;em&gt;&lt;a href="https://xyncro.tech/chiron/"&gt;Chiron&lt;/a&gt;&lt;/em&gt; delivers a fully-functional
JSON serializer in a compact, &lt;a href="https://github.com/xyncro/chiron/blob/master/src/Chiron/Chiron.fs"&gt;single-file implementation&lt;/a&gt;.&lt;/p&gt;


</description>
    </item>
    <item>
      <title>Hello, FsBlog!</title>
      <guid>https://neoeinstein.github.io//blog/2015/11-29-hello-fsblog</guid>
      <link>https://neoeinstein.github.io//blog/2015/11-29-hello-fsblog/index.html</link>
      <pubDate>Mon, 30 Nov 2015 04:27:31 GMT</pubDate>
      <description>&lt;p&gt;It has been a long time since I have done any sort of blogging. Now that I've committed to an F# Advent post, it's time that I pulled a fork off &lt;a href="https://github.com/fsprojects/FsBlog"&gt;FsBlog&lt;/a&gt; and set up shop on &lt;code&gt;ghâ€‘pages&lt;/code&gt;.&lt;/p&gt;


</description>
    </item>
  </channel>
</rss>